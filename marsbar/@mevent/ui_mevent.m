function [et, i] = ui_mevent(et)
% ui method for selection / editing of event types
% FORMAT [et, i] = ui_mevent(et)
% 
% Input
% et         - mevent type object
% 
% Returns  
% et         - possibly modified object
% i          - indices of selected objects (empty for none)
% 
% The routine sets up the event type window, and waits until that window
% is done, then returns with the modified values.
% 
% $Id$
  
% Put up window and initialize callbacks
[F hDone] = sf_start_window(et);

% Wait for OK, Cancel, figure cleared.
waitfor(hDone,'UserData')

% Get what was pressed, assume cancel if window has died
if ~ishandle(hDone)
  status = 0;
else
  status = get(hDone, 'UserData');
end

if status
  et = get(F, 'UserData');
  hElist = findobj(F, 'Tag', 'elist');
  ic = get(hElist, 'Value');
else
  ic = [];
end

close(F);

return

function [F, hDone] = sf_start_window(et)
% Put up window and set up callbacks
  
%-Generic CallBack code to get embedded object 
cb = 'et = get(findobj(''Tag'', ''ui_mevent''),''UserData''); ';

%-Create window, compute scaling for screen size
%-----------------------------------------------------------------------
WS = spm('WinScale');				%-Window scaling factors
FS = spm('FontSizes');				%-Scaled font sizes
PF = spm_platform('fonts');			%-Font names (for this platform)
S0 = get(0,'ScreenSize');			%-Screen size

% Window size, button size, position, in WS units
win_sz    = [400 300];
n_buttons = 5;
button_sz = [75 50];
button_border = [12 12]; 
button_x  = win_sz(1) - button_sz(1) - button_border(1);
l_b =     button_border(2);
h_b =     win_sz(2) - button_border(2) - button_sz(2);
gap_b =   (h_b - l_b) / (n_buttons-1);
buttons_y  = l_b:gap_b:h_b;

F = figure('IntegerHandle','off',...
	   'Tag','ui_mevent',...
	   'UserData', et, ...
	   'Name','Event type UI', ...
	   'NumberTitle','off',...
	   'Position',[S0(3)/2,S0(4)/2,0,0] + [-250,-200, win_sz].*WS,...
	   'Resize','off',...
	   'Color',[1 1 1]*.7,...
	   'MenuBar','none',...
	   'DefaultTextColor','k',...
	   'DefaultTextFontName',PF.helvetica,...
	   'DefaultTextFontSize',FS(10),...
	   'DefaultAxesFontName',PF.helvetica,...
	   'DefaultUicontrolBackgroundColor',[1 1 1]*.7,...
	   'DefaultUicontrolFontName',PF.helvetica,...
	   'DefaultUicontrolFontSize',FS(10),...
	   'DefaultUicontrolInterruptible','on',...
	   'Colormap',gray(64),...
	   'Renderer','zbuffer',...
	   'Visible','on');

hDone = uicontrol(F,...
		  'Style','Pushbutton','String','OK',...
		  'ToolTipString','OK - press when selected events(s)',...
		  'ForegroundColor','m',...
		  'Tag','Done','UserData',-1,...
		  'Callback',[cb 'ui_mevent_cb(et, ''OK'')'] ,...
		  'Interruptible','off','BusyAction','Cancel',...
		  'Position',[button_x buttons_y(1) button_sz].*WS);

uicontrol(F,...
	  'Style','Pushbutton','String','Cancel',...
	  'ToolTipString','OK - press when selected events(s)',...
	  'ForegroundColor','m',...
	  'Tag','Done','UserData',-1,...
	  'Callback',[cb 'ui_mevent_cb(et, ''Cancel'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(2) button_sz].*WS);
return