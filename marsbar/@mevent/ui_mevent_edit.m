function [et, ic] = ui_mevent_edit(et, ic)
% method to edit invidual events in event_types object
% FORMAT [et, ic] = ui_mevent_edit(et, ic)
% 
% et        - event type object
% ic        - index identifying event 
% 
% In this case, the return of an empty ic means that the routine was
% cancelled, as this makes no sense otherwise.
% 
% This is rather a hack, because the passed, and returned object are used
% only to pull in the object methods for the callback.   The routine
% works by listing all possible events as strings, allocating the strings
% to the IN and OUT lists according to the event being edited, and
% working with these strings entirely until the routine returns.  So,
% although this is an object method, it uses the object fields only
% minimally.  
%
% $Id$

len_et = prod(size(et.event_types));
if nargin < 2
  if len_et > 1
    error('Need event number to edit');
  end
  ic = 1;
end
if prod(size(ic)) > 1
  error('Can only edit one event');
end
if ~isfinite(ic)  % New
  my_event =  struct('name', 'New event', ...
		     'e_spec', []);
  ic = len_et + 1;
elseif ic < 0 | ic > len_et
  error('Event number is out of range');
else
  my_event = et.event_types(ic);
end

% Put up window and initialize callbacks
[F hDone hListIN hListOUT hName] = sf_start_edit_window(et, my_event);

% Wait for OK, Cancel, figure cleared.
waitfor(hDone,'UserData')

% Get what was pressed, assume cancel if window has died
if ~ishandle(hDone)
  status = 0;
  ic = [];
else
  status = get(hDone, 'UserData');
  if status % OK
    e_strings = get(hListIN, 'Strings');
    e_name    = get(hName, 'Value');
    
  else
    ic = [];
  end
  close(F);
end

return

function [F, hDone] = sf_start_edit_window(et)
% Put up window and set up callbacks
  
%-Generic CallBack code to get embedded object 
cb = 'et = get(findobj(''Tag'', ''ui_mevent''),''UserData''); ';

%-Create window, compute scaling for screen size
%-----------------------------------------------------------------------
WS = spm('WinScale');				%-Window scaling factors
FS = spm('FontSizes');				%-Scaled font sizes
PF = spm_platform('fonts');			%-Font names (for this platform)
S0 = get(0,'ScreenSize');			%-Screen size

% Window size, button size, position, in WS units
win_sz      = [400 500];
ratio_dor   = (1 + sqrt(5))/2;

% Button sizes and positions
n_buttons   = 8; % 4 not shown, sort of thing
button_sz_x = 75;
button_border = [12 12]; 
button_sz   = [button_sz_x button_sz_x / ratio_dor];
button_x    = win_sz(1) - button_sz(1) - button_border(1);
l_b         = button_border(2);
h_b         = win_sz(2) - button_border(2) - button_sz(2);
gap_b       = (h_b - l_b) / (n_buttons-1);
buttons_y   = l_b:gap_b:h_b;

% Event list size, position
elist_border = button_border;
elist_pos    = elist_border;
elist_sz(1)  = button_x - elist_border(1)*2;
elist_sz(2)  = win_sz(2) - elist_border(2)*2;

F = figure('IntegerHandle','off',...
	   'Tag','ui_mevent_edit',...
	   'UserData', et, ...
	   'Name','Event type edit', ...
	   'NumberTitle','off',...
	   'Position',[S0(3)/2,S0(4)/2,0,0] + [-250,-200, win_sz].*WS,...
	   'Resize','off',...
	   'Color',[1 1 1]*.7,...
	   'MenuBar','none',...
	   'DefaultTextColor','k',...
	   'DefaultTextFontName',PF.helvetica,...
	   'DefaultTextFontSize',FS(10),...
	   'DefaultAxesFontName',PF.helvetica,...
	   'DefaultUicontrolBackgroundColor',[1 1 1]*.7,...
	   'DefaultUicontrolFontName',PF.helvetica,...
	   'DefaultUicontrolFontSize',FS(10),...
	   'DefaultUicontrolInterruptible','on',...
	   'Colormap',gray(64),...
	   'Renderer','zbuffer',...
	   'Visible','on');

% OK
hDone = uicontrol(F,...
		  'Style','Pushbutton','String','OK',...
		  'ToolTipString','OK - press after selecting selected events types',...
		  'ForegroundColor','k',...
		  'Tag','Done','UserData',-1,...
		  'Callback',[cb 'ui_mevent_edit_cb(et, ''OK'')'] ,...
		  'Interruptible','off','BusyAction','Cancel',...
		  'Position',[button_x buttons_y(1) button_sz].*WS);

% Cancel
uicontrol(F,...
	  'Style','Pushbutton','String','Cancel',...
	  'ToolTipString','Cancel UI and return without changes',...
	  'ForegroundColor','k',...
	  'Tag','Cancel','UserData',-1,...
	  'Callback',[cb 'ui_mevent_edit_cb(et, ''Cancel'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(2) button_sz].*WS);

% New
uicontrol(F,...
	  'Style','Pushbutton','String','New',...
	  'ToolTipString','New - create new event type',...
	  'ForegroundColor','k',...
	  'Tag','New','UserData',-1,...
	  'Callback',[cb 'ui_mevent_cb(et, ''New'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(5) button_sz].*WS);

% Events that are IN list
if isfield(et.event_types, 'name')
  eNames = {et.event_types(:).name};
else
  eNames = {};
end

uicontrol(F,'Style','ListBox','Tag','eList_IN',...
	  'ToolTipString',['Select events(s) - drag/shift-click',...
		    '/ctrl-click to select multiple events'],...
	  'String',eNames,...
	  'Max',2,...
	  'CallBack', '' ,...
	  'Interruptible','off','BusyAction','Queue',...
	  'BackgroundColor','w',...
	  'Position',[elist_pos elist_sz].*WS);

% Events that are OUT list
uicontrol(F,'Style','ListBox','Tag','eList_OUT',...
	  'ToolTipString',['Select events(s) - drag/shift-click',...
		    '/ctrl-click to select multiple events'],...
	  'String',eNames,...
	  'Max',2,...
	  'CallBack', '' ,...
	  'Interruptible','off','BusyAction','Queue',...
	  'BackgroundColor','w',...
	  'Position',[elist_pos elist_sz].*WS);

return