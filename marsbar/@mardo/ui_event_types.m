function [D, ic, status] = ui_event_types(D)
% ui method for selection / editing of event types
% FORMAT [D, ic, status] = ui_event_types(D)
% 
% Input
% D          - design object
% 
% Returns  
% D          - possibly modified design object
% ic         - indices of selected event types (empty for none)
% status     - 0 for Cancel or window quit
%              1 for OK, but no edits to event types
%              2 for OK, with edits to event types
% 
% The routine sets up the event type window, and waits until that window
% is done, then returns with the modified values.
% 
% $Id$
  
% Put up window and initialize callbacks
[F hDone hList hEdit] = sf_start_window(D);

% Wait for OK, Cancel, figure cleared.
waitfor(hDone,'UserData')

% Get what was pressed, assume cancel if window has died
ic = [];
if ~ishandle(hDone)
  status = 0;
else
  status = get(hDone, 'UserData');
  if status
    % Edit control contains info as to whether edits done
    status = status + get(hEdit, 'UserData');
    D = get(F, 'UserData');
    if ~isempty(event_types(D))
      ic = get(hList, 'Value');
    end
  end
  close(F);
end

return

function [F, hDone, hList, hEdit] = sf_start_window(D)
% Put up window and set up callbacks

% Window tag
w_tag = 'ui_event_types';
  
% Close any event_types windows currently open
close(findobj('Tag', w_tag))
  
%-Generic CallBack code to get embedded object 
cb = ['et_D = get(findobj(''Tag'', ''' w_tag '''),''UserData''); '];

%-Create window, compute scaling for screen size
%-----------------------------------------------------------------------
WS = spm('WinScale');				%-Window scaling factors
FS = spm('FontSizes');				%-Scaled font sizes
PF = spm_platform('fonts');			%-Font names (for this platform)
S0 = get(0,'ScreenSize');			%-Screen size

% Window size, button size, position, in WS units
win_sz      = [400 300];
ratio_dor   = (1 + sqrt(5))/2;

% Button sizes and positions
n_buttons   = 5;
button_sz_x = 75;
button_border = [12 12]; 
button_sz   = [button_sz_x button_sz_x / ratio_dor];
button_x    = win_sz(1) - button_sz(1) - button_border(1);
l_b         = button_border(2);
h_b         = win_sz(2) - button_border(2) - button_sz(2);
gap_b       = (h_b - l_b) / (n_buttons-1);
buttons_y   = l_b:gap_b:h_b;

% Event list size, position
elist_border = button_border;
elist_pos    = elist_border;
elist_sz(1)  = button_x - elist_border(1)*2;
elist_sz(2)  = win_sz(2) - elist_border(2)*2;

F = figure('IntegerHandle','off',...
	   'Tag', w_tag,...
	   'UserData', D, ...
	   'Name','Event type', ...
	   'NumberTitle','off',...
	   'Position',[S0(3)/2,S0(4)/2,0,0] + [-250,-200, win_sz].*WS,...
	   'Resize','off',...
	   'Color',[1 1 1]*.7,...
	   'MenuBar','none',...
	   'DefaultTextColor','k',...
	   'DefaultTextFontName',PF.helvetica,...
	   'DefaultTextFontSize',FS(10),...
	   'DefaultAxesFontName',PF.helvetica,...
	   'DefaultUicontrolBackgroundColor',[1 1 1]*.7,...
	   'DefaultUicontrolFontName',PF.helvetica,...
	   'DefaultUicontrolFontSize',FS(10),...
	   'DefaultUicontrolInterruptible','on',...
	   'Colormap',gray(64),...
	   'Renderer','painters',...
	   'Visible','on');

% OK
hDone = uicontrol(F,...
		  'Style','Pushbutton','String','OK',...
		  'ToolTipString','OK - press after selecting selected events types',...
		  'ForegroundColor','k',...
		  'Tag','Done','UserData',-1,...
		  'Callback',[cb 'ui_event_types_cb(et_D, ''OK'')'] ,...
		  'Interruptible','off','BusyAction','Cancel',...
		  'Position',[button_x buttons_y(1) button_sz].*WS);

% Cancel
uicontrol(F,...
	  'Style','Pushbutton','String','Cancel',...
	  'ToolTipString','Cancel UI and return without changes',...
	  'ForegroundColor','k',...
	  'Tag','Cancel','UserData',-1,...
	  'Callback',[cb 'ui_event_types_cb(et_D, ''Cancel'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(2) button_sz].*WS);

% Delete
uicontrol(F,...
	  'Style','Pushbutton','String','Delete',...
	  'ToolTipString','Delete - press after selecting events type(s)',...
	  'ForegroundColor','k',...
	  'Tag','Delete','UserData',-1,...
	  'Callback',[cb 'ui_event_types_cb(et_D, ''Delete'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(3) button_sz].*WS);

% Edit
hEdit = uicontrol(F,...
		  'Style','Pushbutton','String','Edit',...
		  'ToolTipString','Edit - press after selecting an event type',...
		  'ForegroundColor','k',...
		  'Tag','eEdit','UserData',0,...
		  'Callback',[cb 'ui_event_types_cb(et_D, ''Edit'')'] ,...
		  'Interruptible','off','BusyAction','Cancel',...
		  'Position',[button_x buttons_y(4) button_sz].*WS);

% New
uicontrol(F,...
	  'Style','Pushbutton','String','New',...
	  'ToolTipString','New - create new event type',...
	  'ForegroundColor','k',...
	  'Tag','New','UserData',-1,...
	  'Callback',[cb 'ui_event_types_cb(et_D, ''New'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(5) button_sz].*WS);

% Event type list
et = event_types(D);
if isfield(et, 'name')
  eNames = {et(:).name};
else
  eNames = {};
end

hList = uicontrol(F,'Style','ListBox','Tag','eList',...
		  'ToolTipString',['Select events(s) - drag/shift-click',...
		    '/ctrl-click to select multiple events'],...
		  'String',eNames,...
		  'Max',2,...
		  'CallBack', '' ,...
		  'Interruptible','off','BusyAction','Queue',...
		  'BackgroundColor','w',...
		  'Position',[elist_pos elist_sz].*WS);

return