function [D, ic] = ui_et_edit(D, ic)
% method to edit invidual event types in design
% FORMAT [D, ic] = ui_et_edit(D, ic)
% 
% D         - design object
% ic        - index identifying event type to edit (or edited)
% 
% In this case, the return of an empty ic means that the routine was
% cancelled, as this makes no sense otherwise.
% 
% The object method idea here is rather a hack, because the passed object is
% used only to pull in the object methods for the callback.
%
% We first collect all the events from the design, and their names.  The
% event passed, that are IN, get attached to the top (IN) panel, and the
% rest go to the bottom (OUT) panel.  Event names and definitions
% (session, event number pairs) are always sorted according to the
% current sort mode, which is set from the GUI.
% 
% $Id$

et = event_types(D);
len_et = prod(size(et));
if nargin < 2
  if len_et > 1
    error('Need event number to edit');
  end
  if len_et
    ic = 1;
  else
    ic = Inf;
  end
end
if prod(size(ic)) > 1
  error('Can only edit one event');
end
if ~isfinite(ic)  % New
  my_event =  struct('name', 'New event', ...
		     'e_spec', []);
  ic = len_et + 1;
elseif ic < 0 | ic > len_et
  error('Event number is out of range');
else
  my_event = et(ic);
end

% Put up window and initialize callbacks
[F hDone hListIN hName] = sf_start_edit_window(D, my_event);

% Wait for OK, Cancel, figure cleared.
waitfor(hDone,'UserData')

% Get what was pressed, assume cancel if window has died
if ~ishandle(hDone)
  status = 0;
  ic = [];
else
  status = get(hDone, 'UserData');
  if status % OK
    my_event.name   = get(hName, 'String');
    e_vals          = get(hListIN, 'UserData');
    my_event.e_spec = mars_struct('getifthere', e_vals, 'e_spec');
    if isempty(et), et = my_event; else et(ic) = my_event; end
    D               = event_types(D, et);
  else
    ic = [];
  end
  close(F);
end

return

function [F, hDone, hListIN, hName] = sf_start_edit_window(D, my_event)
% Put up window and set up callbacks

% Window tag
w_tag = 'ui_et_edit';
  
% Close any et_edit windows currently open
close(findobj('Tag', w_tag))
  
%-Generic CallBack code to get embedded object 
cb = ['ete_D = get(findobj(''Tag'', ''' w_tag '''),''UserData''); '];

% Get events IN and events OUT
[all_es ev_names] = event_specs(D);
n_evs = size(all_es, 2);
ev_names = cellstr([char(ev_names) ...     % add session names
	    repmat(': session ', n_evs, 1) ...
	    num2str(all_es(1, :)')]);
if isempty(my_event.e_spec)
  in_cols = logical(zeros(n_evs, 1));
else
  in_cols = ismember(all_es', my_event.e_spec', 'rows');
end
IN_evs = pr_sort_evs(struct('names', {ev_names(in_cols)},...
			    'e_spec', all_es(:, in_cols)), ...
		     'session');
OUT_evs = pr_sort_evs(struct('names', {ev_names(~in_cols)},...
			     'e_spec', all_es(:, ~in_cols)),...
		      'session');

%-Create window, compute scaling for screen size
%-----------------------------------------------------------------------
WS = spm('WinScale');				%-Window scaling factors
FS = spm('FontSizes');				%-Scaled font sizes
PF = spm_platform('fonts');			%-Font names (for this platform)
S0 = get(0,'ScreenSize');			%-Screen size

% Window size, button size, positions, in WS units
win_sz      = [400 500];
b_ratio     = (1 + sqrt(5))/1.5;
border_x    = 12;
border_y    = 12;
text_sz     = 12;
button_sz_x = 80;
button_sz_y = button_sz_x / b_ratio;
button_sz   = [button_sz_x button_sz_y];

% Text sizes, locations
label_gap    = 4;   % y gap between label and control it refers to 
label_sz_y   = text_sz *1.5;
control_gap  = 14;   % default y gap between controls
text_box_sz  = label_sz_y * 1.5;

% Sizes, positions for stuff on LHS
OUT_list_y   = border_y;
name_label_y = win_sz(2)-border_y-label_sz_y;
name_box_y   = name_label_y - label_gap - text_box_sz;
IN_label_y   = name_box_y - control_gap - label_sz_y;
IN_list_top  = IN_label_y - label_gap;

list_sz_y    = (IN_list_top - OUT_list_y ...
    - control_gap - label_sz_y - label_gap)/2;

IN_list_y    = IN_list_top - list_sz_y;
OUT_label_y  = IN_list_y - control_gap - label_sz_y;
OUT_list_top = OUT_label_y - label_gap;

% Sizes, positions for stuff on RHS
n_buttons   = 4; % buttons (sizes) to spread out across list size
button_x    = win_sz(1) - button_sz_x - border_x;
gap_b       = (list_sz_y - button_sz_y) / (n_buttons-1);
buttons_y   = [OUT_list_y:gap_b:OUT_list_top ...
	       IN_list_y:gap_b:IN_list_top];
sort_box_y  = buttons_y(6);
sort_label_y = sort_box_y + button_sz_y + label_gap;

% Sort out x sizes for LHS
list_sz_x   = button_x - border_x*2;
list_sz     = [list_sz_x list_sz_y];

% Figure
F = figure('IntegerHandle','off',...
	   'Tag', w_tag,...
	   'UserData', D, ...
	   'Name','Event type edit', ...
	   'NumberTitle','off',...
	   'Position',[S0(3)/2,S0(4)/2,0,0] + [-250,-200, win_sz].*WS,...
	   'Resize','off',...
	   'Color',[1 1 1]*.7,...
	   'MenuBar','none',...
	   'DefaultTextColor','k',...
	   'DefaultTextFontName',PF.helvetica,...
	   'DefaultTextFontSize',FS(text_sz),...
	   'DefaultAxesFontName',PF.helvetica,...
	   'DefaultUicontrolBackgroundColor',[1 1 1]*.7,...
	   'DefaultUicontrolFontName',PF.helvetica,...
	   'DefaultUicontrolFontSize',FS(text_sz),...
	   'DefaultUicontrolInterruptible','on',...
	   'Colormap',gray(64),...
	   'Renderer','painters',...
	   'Visible','on');

% OK
hDone = uicontrol(F,...
		  'Style','Pushbutton','String','OK',...
		  'ToolTipString','OK - press after selecting events to include',...
		  'ForegroundColor','k',...
		  'Tag','ui_et_done', ...
		  'Callback',[cb 'ui_et_edit_cb(ete_D, ''OK'')'] ,...
		  'Interruptible','off','BusyAction','Cancel',...
		  'Position',[button_x buttons_y(1) button_sz].*WS);

% Cancel
uicontrol(F,...
	  'Style','Pushbutton','String','Cancel',...
	  'ToolTipString','Cancel UI and return without changing event type',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_cancel',...
	  'Callback',[cb 'ui_et_edit_cb(ete_D, ''Cancel'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(2) button_sz].*WS);

% Add
uicontrol(F,...
	  'Style','Pushbutton','String','Add',...
	  'ToolTipString','Add events to event type',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_add',...
	  'Callback',[cb 'ui_et_edit_cb(ete_D, ''Add'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(4) button_sz].*WS);

% Remove
uicontrol(F,...
	  'Style','Pushbutton','String','Remove',...
	  'ToolTipString','Remove events to event type',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_remove',...
	  'Callback',[cb 'ui_et_edit_cb(ete_D, ''Remove'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(8) button_sz].*WS);

% Sort box
uicontrol(F,...
	  'Style','PopUp', ...
	  'String',strvcat('Session no', 'Event no', 'Event name'),...
	  'ToolTipString','Sort events by...',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_sort',...
	  'Callback',[cb 'ui_et_edit_cb(ete_D, ''Sort'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x sort_box_y button_sz].*WS);

% Sort box label
uicontrol(F,'Style','Text',...
	  'String','Sort by...',...
	  'FontWeight','Bold',...
	  'ForegroundColor','k',...
	  'HorizontalAlignment','Center',...
	  'Position',[button_x sort_label_y button_sz_x label_sz_y].*WS);

% Name box
hName = uicontrol(F,'Style','Edit','Tag','ui_et_name',...
		  'ToolTipString','enter name for event type',...
		  'String', my_event.name,...
		  'UserData', my_event.name,... % to check for change
		  'HorizontalAlignment','Left',...
		  'Interruptible','off',...
		  'BackgroundColor','w',...
		  'Position',[border_x name_box_y list_sz_x ...
		    text_box_sz].*WS);

% Name box label
uicontrol(F,'Style','Text',...
	  'String','Event type name',...
	  'FontWeight','Bold',...
	  'ForegroundColor','k',...
	  'HorizontalAlignment','Left',...
	  'Position',[border_x name_label_y list_sz_x label_sz_y].*WS);

% IN list
hListIN = uicontrol(F,'Style','ListBox','Tag','ui_et_IN',...
		    'ToolTipString',['Select events(s) - drag/shift-click',...
		    '/ctrl-click to select multiple events'],...
		    'UserData', IN_evs,...
		    'String', IN_evs.names,...
		    'Max',2,...
		    'CallBack', '' ,...
		    'Interruptible','off','BusyAction','Queue',...
		    'BackgroundColor','w',...
		    'Position',[border_x IN_list_y list_sz].*WS);

% IN label
uicontrol(F,'Style','Text',...
	  'String','Events IN event type',...
	  'FontWeight','Bold',...
	  'ForegroundColor','k',...
	  'HorizontalAlignment','Left',...
	  'Position',[border_x IN_label_y list_sz_x label_sz_y].*WS);

% Events that are OUT list
uicontrol(F,'Style','ListBox','Tag','ui_et_OUT',...
	  'ToolTipString',['Select events(s) - drag/shift-click',...
		    '/ctrl-click to select multiple events'],...
	  'UserData', OUT_evs,...
	  'String', OUT_evs.names,...
	  'Max',2,...
	  'CallBack', '' ,...
	  'Interruptible','off','BusyAction','Queue',...
	  'BackgroundColor','w',...
	  'Position',[border_x OUT_list_y, list_sz].*WS);

% OUT label
uicontrol(F,'Style','Text',...
	  'String','Events NOT IN event type',...
	  'FontWeight','Bold',...
	  'ForegroundColor','k',...
	  'HorizontalAlignment','Left',...
	  'Position',[border_x OUT_label_y list_sz_x label_sz_y].*WS);

return