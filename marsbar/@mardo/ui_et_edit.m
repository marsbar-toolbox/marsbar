function [D, ic] = ui_et_edit(D, ic)
% method to edit invidual event types in design
% FORMAT [D, ic] = ui_et_edit(D, ic)
% 
% D         - design object
% ic        - index identifying event type to edit (or edited)
% 
% In this case, the return of an empty ic means that the routine was
% cancelled, as this makes no sense otherwise.
% 
% The object method idea here is rather a hack, because the passed object is
% used only to pull in the object methods for the callback.
%
% We first collect all the events from the design, and their names.  The
% event passed, that are IN, get attached to the top (IN) panel, and the
% rest go to the bottom (OUT) panel.  Event names and definitions
% (session, event number pairs) are always sorted according to the
% current sort mode, which is set from the GUI.
% 
% $Id$

et = event_types(D);
len_et = prod(size(et));
if nargin < 2
  if len_et > 1
    error('Need event number to edit');
  end
  if len_et
    ic = 1;
  else
    ic = Inf;
  end
end
if prod(size(ic)) > 1
  error('Can only edit one event');
end
if ~isfinite(ic)  % New
  my_event =  struct('name', 'New event', ...
		     'e_spec', []);
  ic = len_et + 1;
elseif ic < 0 | ic > len_et
  error('Event number is out of range');
else
  my_event = et(ic);
end

% Put up window and initialize callbacks
[F hDone hListIN hListOUT hName] = sf_start_edit_window(D, my_event);

% Wait for OK, Cancel, figure cleared.
waitfor(hDone,'UserData')

% Get what was pressed, assume cancel if window has died
if ~ishandle(hDone)
  status = 0;
  ic = [];
else
  status = get(hDone, 'UserData');
  if status % OK
    my_event.name   = get(hName, 'Value');
    e_vals          = get(hListIN, 'UserData');
    my_event.e_spec = mars_struct('getifthere', e_vals, 'e_spec');
    et(ic)          = my_event;
    D               = event_types(D, et);
  else
    ic = [];
  end
  close(F);
end

return

function [F, hDone, hListIN, hListOUT, hName] = sf_start_edit_window(D, my_event)
% Put up window and set up callbacks
et = event_types(D);

%-Generic CallBack code to get embedded object 
cb = 'cbD = get(findobj(''Tag'', ''ui_et_edit''),''UserData''); ';

%-Create window, compute scaling for screen size
%-----------------------------------------------------------------------
WS = spm('WinScale');				%-Window scaling factors
FS = spm('FontSizes');				%-Scaled font sizes
PF = spm_platform('fonts');			%-Font names (for this platform)
S0 = get(0,'ScreenSize');			%-Screen size

% Window size, button size, positions, in WS units
win_sz      = [400 500];
b_ratio     = (1 + sqrt(5))/1.5;

% Text sizes
text_gap    = 6;
text_size   = 12;

% Button sizes and positions
n_buttons   = 7; % ok, cancel, add, blank, blank, remove, sort list
button_sz_x = 75;
button_border = [12 12]; 
button_sz   = [button_sz_x button_sz_x / b_ratio];
button_x    = win_sz(1) - button_sz(1) - button_border(1);



l_b         = button_border(2);
h_b         = win_sz(2) - button_border(2) - button_sz(2) ...
    - text_gap - text_size;
gap_b       = (h_b - l_b) / (n_buttons-1);
buttons_y   = l_b:gap_b:h_b;

% IN, OUT Event list size, position
space_b       = gap_b - button_sz(2); % space between buttons, and lists
elist_border  = button_border;
elist_sz(1)   = button_x - elist_border(1)*2;
elist_sz(2)   = (buttons_y(7) - space_b*2 - elist_border(2))/2;
elist_OUT_pos = elist_border;
elist_IN_pos  = [elist_border(1) elist_border(2) + ...
		 elist_sz(2) + space_b];

% Figure
F = figure('IntegerHandle','off',...
	   'Tag','ui_et_edit',...
	   'UserData', D, ...
	   'Name','Event type edit', ...
	   'NumberTitle','off',...
	   'Position',[S0(3)/2,S0(4)/2,0,0] + [-250,-200, win_sz].*WS,...
	   'Resize','off',...
	   'Color',[1 1 1]*.7,...
	   'MenuBar','none',...
	   'DefaultTextColor','k',...
	   'DefaultTextFontName',PF.helvetica,...
	   'DefaultTextFontSize',FS(text_size),...
	   'DefaultAxesFontName',PF.helvetica,...
	   'DefaultUicontrolBackgroundColor',[1 1 1]*.7,...
	   'DefaultUicontrolFontName',PF.helvetica,...
	   'DefaultUicontrolFontSize',FS(text_size),...
	   'DefaultUicontrolInterruptible','on',...
	   'Colormap',gray(64),...
	   'Renderer','zbuffer',...
	   'Visible','on');

% OK
hDone = uicontrol(F,...
		  'Style','Pushbutton','String','OK',...
		  'ToolTipString','OK - press after selecting events to include',...
		  'ForegroundColor','k',...
		  'Tag','ui_et_done', ...
		  'Callback',[cb 'ui_et_edit_cb(cbD, ''OK'')'] ,...
		  'Interruptible','off','BusyAction','Cancel',...
		  'Position',[button_x buttons_y(1) button_sz].*WS);

% Cancel
uicontrol(F,...
	  'Style','Pushbutton','String','Cancel',...
	  'ToolTipString','Cancel UI and return without changing event type',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_cancel',...
	  'Callback',[cb 'ui_et_edit_cb(cbD, ''Cancel'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(2) button_sz].*WS);

% Add
uicontrol(F,...
	  'Style','Pushbutton','String','Add',...
	  'ToolTipString','Add events to event type',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_add',...
	  'Callback',[cb 'ui_et_cb(cbD, ''Add'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(3) button_sz].*WS);

% Remove
uicontrol(F,...
	  'Style','Pushbutton','String','Remove',...
	  'ToolTipString','Remove events to event type',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_remove',...
	  'Callback',[cb 'ui_et_cb(cbD, ''Remove'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(6) button_sz].*WS);

% Sort box
uicontrol(F,...
	  'Style','PopUp', ...
	  'String',strvcat('Event no', 'Session no', 'Event name'),...
	  'ToolTipString','Sort events by...',...
	  'ForegroundColor','k',...
	  'Tag','ui_et_sort',...
	  'Callback',[cb 'ui_et_cb(cbD, ''Sort'')'] ,...
	  'Interruptible','off','BusyAction','Cancel',...
	  'Position',[button_x buttons_y(7) button_sz].*WS);

% Name box
hName = uicontrol(F,'Style','Edit','Tag','ui_et_name',...
		  'ToolTipString','enter name for event type',...
		  'HorizontalAlignment','Left',...
		  'Interruptible','off',...
		  'Position',[elist_border(1) buttons_y(7), elist_sz(1), button_sz(2)].*WS);

% Events that are IN list
if isfield(et, 'name')
  eNames = {et(:).name};
else
  eNames = {};
end

hListIN = uicontrol(F,'Style','ListBox','Tag','eList_IN',...
		'ToolTipString',['Select events(s) - drag/shift-click',...
		    '/ctrl-click to select multiple events'],...
		'String',eNames,...
		'Max',2,...
		'CallBack', '' ,...
		'Interruptible','off','BusyAction','Queue',...
		'BackgroundColor','w',...
		'Position',[elist_IN_pos elist_sz].*WS);

% Events that are OUT list
hListOUT = uicontrol(F,'Style','ListBox','Tag','eList_OUT',...
		 'ToolTipString',['Select events(s) - drag/shift-click',...
		    '/ctrl-click to select multiple events'],...
		 'String',eNames,...
		 'Max',2,...
		 'CallBack', '' ,...
		 'Interruptible','off','BusyAction','Queue',...
		 'BackgroundColor','w',...
		 'Position',[elist_OUT_pos elist_sz].*WS);

return